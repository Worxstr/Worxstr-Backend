name: Build and Deploy

on:
  push:
    branches:
      - dev
      - main
      - automation-**
env:
  DWOLLA_APP_KEY: ${{ secrets.DWOLLA_SANDBOX_KEY }}
  DWOLLA_APP_SECRET: ${{ secrets.DWOLLA_SANDBOX_SECRET }}
  DWOLLA_HOST: "sandbox"
  FIREBASE_SERVER_KEY: ${{ secrets.FIREBASE_SERVER_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE
      - uses: actions/checkout@v2

      # Set up Python 3.7 environment
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: "3.7"

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      
      - name: Cache pip
        uses: actions/cache@v1
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run our unit tests
      - name: Run unit tests
        run: |
          python tests.py
  deploy-to-test:
    # Only run this job if "build" has ended successfully
    needs:
      - build
      
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE
      - uses: actions/checkout@v2

      # Set up Python 3.7 environment
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: "3.7"

      - name: Initialize environment variables
        run: |
          export "BRANCH=${GITHUB_REF#/refs/heads/}"

          echo "GIT_BRANCH=$BRANCH" >> $GITHUB_ENV

          # Set deploy environment
          if [[ "$BRANCH" == "refs/heads/main" ]]; then
            echo "DEPLOY_ENV=worxstr-backend-prod-env" >> $GITHUB_ENV
          elif [[ "$BRANCH" == "refs/heads/dev" ]]; then
            echo "DEPLOY_ENV=worxstr-backend-dev2-env" >> $GITHUB_ENV
          else
            echo "DEPLOY_ENV=worxstr-backend-qa-env" >> $GITHUB_ENV
          fi


      # Set up cache for pip
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: Cache pip
        uses: actions/cache@v1
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      # Elastic Beanstalk CLI version
      - name: Get EB CLI version
        run: |
          python -m pip install --upgrade pip
          pip install awsebcli --upgrade
          eb --version
      # Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Create the Elastic Beanstalk application
      - name: Create EBS application
        run: |
          eb init -p python-3.7 Worxstr-Backend --region us-east-1
      # Deploy to (or Create) the Elastic Beanstalk environment
      - name: Deploy to mapped environment
        run: |
          env | sort

          eb use "$DEPLOY_ENV"
          eb status "$DEPLOY_ENV"
          eb deploy
